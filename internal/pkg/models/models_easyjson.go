// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "login":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels1(in *jlexer.Lexer, out *Subscribe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "is_rating":
			out.IsRating = bool(in.Bool())
		case "is_review":
			out.IsReview = bool(in.Bool())
		case "body":
			out.Body = string(in.String())
		case "user_id":
			out.UserId = int(in.Int())
		case "user_login":
			out.UserLogin = string(in.String())
		case "film_id":
			out.FilmId = int(in.Int())
		case "film_title":
			out.FilmTitle = string(in.String())
		case "date":
			out.Date = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels1(out *jwriter.Writer, in Subscribe) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"is_rating\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRating))
	}
	{
		const prefix string = ",\"is_review\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReview))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmId))
	}
	{
		const prefix string = ",\"film_title\":"
		out.RawString(prefix)
		out.String(string(in.FilmTitle))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int64(int64(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscribe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscribe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscribe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscribe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels2(in *jlexer.Lexer, out *Signup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels2(out *jwriter.Writer, in Signup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Signup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Signup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Signup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Signup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels3(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels3(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels4(in *jlexer.Lexer, out *Reviews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Reviews, 0, 1)
			} else {
				*out = Reviews{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Review
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels4(out *jwriter.Writer, in Reviews) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Reviews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reviews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reviews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reviews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels5(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "user_login":
			out.UserLogin = string(in.String())
		case "text_body":
			out.TextBody = string(in.String())
		case "user_id":
			out.UserId = int(in.Int())
		case "film_id":
			out.FilmId = int(in.Int())
		case "rate":
			out.Rate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels5(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"text_body\":"
		out.RawString(prefix)
		out.String(string(in.TextBody))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmId))
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Int(int(in.Rate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels6(in *jlexer.Lexer, out *PublicUsers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PublicUsers, 0, 1)
			} else {
				*out = PublicUsers{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 PublicUser
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels6(out *jwriter.Writer, in PublicUsers) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PublicUsers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicUsers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicUsers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicUsers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels7(in *jlexer.Lexer, out *PublicUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels7(out *jwriter.Writer, in PublicUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels8(in *jlexer.Lexer, out *Playlists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Playlists, 0, 1)
			} else {
				*out = Playlists{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Playlist
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels8(out *jwriter.Writer, in Playlists) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Playlists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels9(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				if out.Films == nil {
					out.Films = new(FilmCards)
				}
				(*out.Films).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels9(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil {
			out.RawString("null")
		} else {
			(*in.Films).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels10(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "born_date":
			out.BornDate = string(in.String())
		case "born_place":
			out.BornPlace = string(in.String())
		case "films_id":
			if in.IsNull() {
				in.Skip()
				out.FilmsId = nil
			} else {
				in.Delim('[')
				if out.FilmsId == nil {
					if !in.IsDelim(']') {
						out.FilmsId = make([]int, 0, 8)
					} else {
						out.FilmsId = []int{}
					}
				} else {
					out.FilmsId = (out.FilmsId)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.FilmsId = append(out.FilmsId, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels10(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"born_date\":"
		out.RawString(prefix)
		out.String(string(in.BornDate))
	}
	{
		const prefix string = ",\"born_place\":"
		out.RawString(prefix)
		out.String(string(in.BornPlace))
	}
	{
		const prefix string = ",\"films_id\":"
		out.RawString(prefix)
		if in.FilmsId == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.FilmsId {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels11(in *jlexer.Lexer, out *Login) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels11(out *jwriter.Writer, in Login) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Login) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Login) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Login) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Login) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels12(in *jlexer.Lexer, out *FilmPersons) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(FilmPersons, 0, 1)
			} else {
				*out = FilmPersons{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 FilmPerson
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels12(out *jwriter.Writer, in FilmPersons) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPersons) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPersons) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPersons) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPersons) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels13(in *jlexer.Lexer, out *FilmPerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels13(out *jwriter.Writer, in FilmPerson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPerson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPerson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels14(in *jlexer.Lexer, out *FilmCards) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(FilmCards, 0, 0)
			} else {
				*out = FilmCards{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 FilmCard
			(v16).UnmarshalEasyJSON(in)
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels14(out *jwriter.Writer, in FilmCards) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v FilmCards) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmCards) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmCards) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmCards) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels15(in *jlexer.Lexer, out *FilmCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "main_genre":
			out.MainGenre = string(in.String())
		case "small_img":
			out.SmallImg = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "rating":
			out.Rating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels15(out *jwriter.Writer, in FilmCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"main_genre\":"
		out.RawString(prefix)
		out.String(string(in.MainGenre))
	}
	{
		const prefix string = ",\"small_img\":"
		out.RawString(prefix)
		out.String(string(in.SmallImg))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels16(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "sum_votes":
			out.SumVotes = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "main_genre":
			out.MainGenre = string(in.String())
		case "youtube_link":
			out.YoutubeLink = string(in.String())
		case "big_img":
			out.BigImg = string(in.String())
		case "small_img":
			out.SmallImg = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels16(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"sum_votes\":"
		out.RawString(prefix)
		out.Int(int(in.SumVotes))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"main_genre\":"
		out.RawString(prefix)
		out.String(string(in.MainGenre))
	}
	{
		const prefix string = ",\"youtube_link\":"
		out.RawString(prefix)
		out.String(string(in.YoutubeLink))
	}
	{
		const prefix string = ",\"big_img\":"
		out.RawString(prefix)
		out.String(string(in.BigImg))
	}
	{
		const prefix string = ",\"small_img\":"
		out.RawString(prefix)
		out.String(string(in.SmallImg))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels17(in *jlexer.Lexer, out *Feed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Feed, 0, 0)
			} else {
				*out = Feed{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 Subscribe
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels17(out *jwriter.Writer, in Feed) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Feed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Feed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Feed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Feed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels18(in *jlexer.Lexer, out *CORSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllowedOrigins":
			if in.IsNull() {
				in.Skip()
				out.AllowedOrigins = nil
			} else {
				in.Delim('[')
				if out.AllowedOrigins == nil {
					if !in.IsDelim(']') {
						out.AllowedOrigins = make([]string, 0, 4)
					} else {
						out.AllowedOrigins = []string{}
					}
				} else {
					out.AllowedOrigins = (out.AllowedOrigins)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.AllowedOrigins = append(out.AllowedOrigins, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllowedHeaders":
			if in.IsNull() {
				in.Skip()
				out.AllowedHeaders = nil
			} else {
				in.Delim('[')
				if out.AllowedHeaders == nil {
					if !in.IsDelim(']') {
						out.AllowedHeaders = make([]string, 0, 4)
					} else {
						out.AllowedHeaders = []string{}
					}
				} else {
					out.AllowedHeaders = (out.AllowedHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.AllowedHeaders = append(out.AllowedHeaders, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllowedMethods":
			if in.IsNull() {
				in.Skip()
				out.AllowedMethods = nil
			} else {
				in.Delim('[')
				if out.AllowedMethods == nil {
					if !in.IsDelim(']') {
						out.AllowedMethods = make([]string, 0, 4)
					} else {
						out.AllowedMethods = []string{}
					}
				} else {
					out.AllowedMethods = (out.AllowedMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.AllowedMethods = append(out.AllowedMethods, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExposedHeaders":
			if in.IsNull() {
				in.Skip()
				out.ExposedHeaders = nil
			} else {
				in.Delim('[')
				if out.ExposedHeaders == nil {
					if !in.IsDelim(']') {
						out.ExposedHeaders = make([]string, 0, 4)
					} else {
						out.ExposedHeaders = []string{}
					}
				} else {
					out.ExposedHeaders = (out.ExposedHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.ExposedHeaders = append(out.ExposedHeaders, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels18(out *jwriter.Writer, in CORSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AllowedOrigins\":"
		out.RawString(prefix[1:])
		if in.AllowedOrigins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.AllowedOrigins {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllowedHeaders\":"
		out.RawString(prefix)
		if in.AllowedHeaders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.AllowedHeaders {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllowedMethods\":"
		out.RawString(prefix)
		if in.AllowedMethods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.AllowedMethods {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExposedHeaders\":"
		out.RawString(prefix)
		if in.ExposedHeaders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.ExposedHeaders {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CORSConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CORSConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComArkadiycheHttpRestApiInternalPkgModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CORSConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CORSConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComArkadiycheHttpRestApiInternalPkgModels18(l, v)
}
